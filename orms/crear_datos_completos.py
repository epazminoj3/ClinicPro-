#!/usr/bin/env python
import os
import sys
import django
from decimal import Decimal
from datetime import datetime, timedelta, date, time
import random

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proy_clinico.settings')
django.setup()

from applications.core.models import (
    TipoSangre, Paciente, Especialidad, Doctor, Cargo, Empleado,
    TipoMedicamento, MarcaMedicamento, Medicamento, Diagnostico,
    TipoGasto, GastoMensual
)
from applications.doctor.models import (
    HorarioAtencion, CitaMedica, Atencion, DetalleAtencion,
    ServiciosAdicionales, Pago, DetallePago
)
from applications.doctor.utils.cita_medica import EstadoCitaChoices
from applications.doctor.utils.doctor import DiaSemanaChoices
from applications.doctor.utils.pago import MetodoPagoChoices, EstadoPagoChoices
from applications.core.utils.medicamento import ViaAdministracion
from applications.core.utils.paciente import EstadoCivilChoices, SexoChoices
from django.utils import timezone

def limpiar_datos():
    """Limpia datos existentes para evitar duplicados"""
    print("üßπ Limpiando datos existentes...")
    
    # Limpiar en orden inverso de dependencias
    DetallePago.objects.all().delete()
    Pago.objects.all().delete()
    DetalleAtencion.objects.all().delete()
    Atencion.objects.all().delete()
    CitaMedica.objects.all().delete()
    HorarioAtencion.objects.all().delete()
    
    GastoMensual.objects.all().delete()
    Empleado.objects.all().delete()
    Doctor.objects.filter(ruc__startswith='17').delete()  # Solo test data
    Paciente.objects.filter(cedula_ecuatoriana__startswith='17').delete()  # Solo test data
    
    print("‚úÖ Datos de prueba limpiados")

def crear_tipos_sangre():
    """Crear tipos de sangre b√°sicos"""
    print("ü©∏ Creando tipos de sangre...")
    
    tipos = [
        ('O+', 'Tipo O positivo - Donante universal de gl√≥bulos rojos'),
        ('O-', 'Tipo O negativo - Donante universal'),
        ('A+', 'Tipo A positivo'),
        ('A-', 'Tipo A negativo'),
        ('B+', 'Tipo B positivo'),
        ('B-', 'Tipo B negativo'),
        ('AB+', 'Tipo AB positivo - Receptor universal'),
        ('AB-', 'Tipo AB negativo'),
    ]
    
    for tipo, desc in tipos:
        TipoSangre.objects.get_or_create(
            tipo=tipo,
            defaults={'descripcion': desc}
        )
    
    print(f"‚úÖ Creados {len(tipos)} tipos de sangre")

def crear_especialidades():
    """Crear especialidades m√©dicas"""
    print("üë®‚Äç‚öïÔ∏è Creando especialidades m√©dicas...")
    
    especialidades = [
        ('Medicina General', 'Atenci√≥n m√©dica integral y primaria'),
        ('Cardiolog√≠a', 'Especialidad del coraz√≥n y sistema cardiovascular'),
        ('Pediatr√≠a', 'Atenci√≥n m√©dica especializada en ni√±os y adolescentes'),
        ('Ginecolog√≠a', 'Salud reproductiva femenina'),
        ('Dermatolog√≠a', 'Enfermedades de la piel'),
        ('Traumatolog√≠a', 'Lesiones del sistema musculoesquel√©tico'),
        ('Neurolog√≠a', 'Enfermedades del sistema nervioso'),
        ('Psiquiatr√≠a', 'Trastornos mentales y del comportamiento'),
        ('Oftalmolog√≠a', 'Enfermedades de los ojos'),
        ('Otorrinolaringolog√≠a', 'Enfermedades del o√≠do, nariz y garganta'),
    ]
    
    for nombre, desc in especialidades:
        Especialidad.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': desc}
        )
    
    print(f"‚úÖ Creadas {len(especialidades)} especialidades")

def crear_cargos():
    """Crear cargos para empleados"""
    print("üíº Creando cargos...")
    
    cargos = [
        ('M√©dico Especialista', 'M√©dico con especializaci√≥n'),
        ('M√©dico General', 'M√©dico de atenci√≥n primaria'),
        ('Enfermero/a', 'Personal de enfermer√≠a'),
        ('Auxiliar de Enfermer√≠a', 'Asistente de enfermer√≠a'),
        ('Recepcionista', 'Atenci√≥n al cliente y citas'),
        ('Administrador', 'Gesti√≥n administrativa'),
        ('Contador', 'Gesti√≥n contable y financiera'),
        ('Limpieza', 'Personal de limpieza y mantenimiento'),
        ('Seguridad', 'Personal de seguridad'),
        ('Farmaceuta', 'Gesti√≥n de medicamentos'),
    ]
    
    for nombre, desc in cargos:
        Cargo.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': desc}
        )
    
    print(f"‚úÖ Creados {len(cargos)} cargos")

def crear_tipos_medicamentos():
    """Crear tipos de medicamentos"""
    print("üíä Creando tipos de medicamentos...")
    
    tipos = [
        ('Analg√©sico', 'Medicamentos para aliviar el dolor'),
        ('Antibi√≥tico', 'Medicamentos contra infecciones bacterianas'),
        ('Antiinflamatorio', 'Reduce inflamaci√≥n y dolor'),
        ('Antihipertensivo', 'Control de presi√≥n arterial'),
        ('Antidiab√©tico', 'Control de diabetes'),
        ('Vitaminas', 'Suplementos vitam√≠nicos'),
        ('Antihistam√≠nico', 'Tratamiento de alergias'),
        ('Antidepresivo', 'Tratamiento de depresi√≥n'),
        ('Ansiol√≠tico', 'Tratamiento de ansiedad'),
        ('Broncodilatador', 'Tratamiento de asma y EPOC'),
    ]
    
    for nombre, desc in tipos:
        TipoMedicamento.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': desc}
        )
    
    print(f"‚úÖ Creados {len(tipos)} tipos de medicamentos")

def crear_marcas_medicamentos():
    """Crear marcas de medicamentos"""
    print("üè≠ Creando marcas de medicamentos...")
    
    marcas = [
        ('Pfizer', 'Farmac√©utica multinacional'),
        ('Bayer', 'Empresa farmac√©utica alemana'),
        ('Novartis', 'Farmac√©utica suiza'),
        ('Roche', 'Empresa farmac√©utica suiza'),
        ('Johnson & Johnson', 'Corporaci√≥n farmac√©utica estadounidense'),
        ('Abbott', 'Empresa de salud global'),
        ('Merck', 'Farmac√©utica alemana'),
        ('GSK', 'GlaxoSmithKline'),
        ('Sanofi', 'Farmac√©utica francesa'),
        ('Gen√©rico', 'Medicamentos gen√©ricos'),
    ]
    
    for nombre, desc in marcas:
        MarcaMedicamento.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': desc}
        )
    
    print(f"‚úÖ Creadas {len(marcas)} marcas")

def crear_medicamentos():
    """Crear medicamentos b√°sicos"""
    print("üíâ Creando medicamentos...")
    
    # Obtener tipos y marcas
    tipos = {t.nombre: t for t in TipoMedicamento.objects.all()}
    marcas = {m.nombre: m for m in MarcaMedicamento.objects.all()}
    
    medicamentos = [
        # Analg√©sicos
        ('Paracetamol', tipos['Analg√©sico'], marcas['Gen√©rico'], '500mg', ViaAdministracion.ORAL, 100, 0.50, True),
        ('Ibuprofeno', tipos['Antiinflamatorio'], marcas['Bayer'], '400mg', ViaAdministracion.ORAL, 80, 0.75, True),
        ('Aspirina', tipos['Analg√©sico'], marcas['Bayer'], '100mg', ViaAdministracion.ORAL, 120, 0.30, True),
        
        # Antibi√≥ticos
        ('Amoxicilina', tipos['Antibi√≥tico'], marcas['GSK'], '500mg', ViaAdministracion.ORAL, 60, 2.50, True),
        ('Azitromicina', tipos['Antibi√≥tico'], marcas['Pfizer'], '250mg', ViaAdministracion.ORAL, 30, 8.00, True),
        ('Cefalexina', tipos['Antibi√≥tico'], marcas['Gen√©rico'], '500mg', ViaAdministracion.ORAL, 40, 3.20, True),
        
        # Antihipertensivos
        ('Losart√°n', tipos['Antihipertensivo'], marcas['Merck'], '50mg', ViaAdministracion.ORAL, 90, 1.80, True),
        ('Enalapril', tipos['Antihipertensivo'], marcas['Gen√©rico'], '10mg', ViaAdministracion.ORAL, 100, 1.20, True),
        
        # Antidiab√©ticos
        ('Metformina', tipos['Antidiab√©tico'], marcas['Sanofi'], '850mg', ViaAdministracion.ORAL, 70, 2.10, True),
        ('Glibenclamida', tipos['Antidiab√©tico'], marcas['Gen√©rico'], '5mg', ViaAdministracion.ORAL, 50, 1.50, True),
        
        # Vitaminas
        ('Complejo B', tipos['Vitaminas'], marcas['Abbott'], '100mg', ViaAdministracion.ORAL, 150, 5.00, True),
        ('Vitamina C', tipos['Vitaminas'], marcas['Bayer'], '1g', ViaAdministracion.ORAL, 200, 3.50, True),
        
        # Antihistam√≠nicos
        ('Loratadina', tipos['Antihistam√≠nico'], marcas['Johnson & Johnson'], '10mg', ViaAdministracion.ORAL, 60, 4.20, True),
        ('Cetirizina', tipos['Antihistam√≠nico'], marcas['GSK'], '10mg', ViaAdministracion.ORAL, 45, 5.80, True),
        
        # Broncodilatadores
        ('Salbutamol', tipos['Broncodilatador'], marcas['GSK'], '100mcg', ViaAdministracion.INHALATORIA, 25, 12.50, True),
    ]
    
    for nombre, tipo, marca, conc, via, cant, precio, comercial in medicamentos:
        Medicamento.objects.get_or_create(
            nombre=nombre,
            defaults={
                'tipo': tipo,
                'marca_medicamento': marca,
                'concentracion': conc,
                'via_administracion': via,
                'cantidad': cant,
                'precio': Decimal(str(precio)),
                'comercial': comercial
            }
        )
    
    print(f"‚úÖ Creados {len(medicamentos)} medicamentos")

def crear_diagnosticos():
    """Crear diagn√≥sticos m√©dicos comunes"""
    print("ü©∫ Creando diagn√≥sticos...")
    
    diagnosticos = [
        ('J00', 'Rinofaringitis aguda [resfriado com√∫n]', 'Infecci√≥n viral del tracto respiratorio superior'),
        ('K59.0', 'Estre√±imiento', 'Dificultad para evacuar'),
        ('R50.9', 'Fiebre no especificada', 'Elevaci√≥n de temperatura corporal'),
        ('M25.5', 'Dolor articular', 'Dolor en articulaciones'),
        ('R51', 'Cefalea', 'Dolor de cabeza'),
        ('K30', 'Dispepsia funcional', 'Indigesti√≥n'),
        ('I10', 'Hipertensi√≥n esencial', 'Presi√≥n arterial elevada'),
        ('E11.9', 'Diabetes mellitus tipo 2 sin complicaciones', 'Diabetes tipo 2'),
        ('F32.9', 'Episodio depresivo sin especificar', 'Depresi√≥n'),
        ('J20.9', 'Bronquitis aguda no especificada', 'Inflamaci√≥n de bronquios'),
        ('L20.9', 'Dermatitis at√≥pica no especificada', 'Eczema'),
        ('N39.0', 'Infecci√≥n de v√≠as urinarias', 'ITU'),
        ('M54.5', 'Lumbago', 'Dolor lumbar'),
        ('R06.02', 'Dificultad respiratoria', 'Disnea'),
        ('K21.9', 'Enfermedad por reflujo gastroesof√°gico', 'ERGE'),
    ]
    
    for codigo, desc, datos in diagnosticos:
        Diagnostico.objects.get_or_create(
            codigo=codigo,
            defaults={
                'descripcion': desc,
                'datos_adicionales': datos
            }
        )
    
    print(f"‚úÖ Creados {len(diagnosticos)} diagn√≥sticos")

def crear_tipos_gastos():
    """Crear tipos de gastos operativos"""
    print("üí∞ Creando tipos de gastos...")
    
    tipos_gastos = [
        ('Arriendo', 'Alquiler del local del consultorio'),
        ('Luz', 'Servicio de energ√≠a el√©ctrica'),
        ('Agua', 'Servicio de agua potable'),
        ('Internet', 'Servicio de internet y telecomunicaciones'),
        ('Tel√©fono', 'Servicio telef√≥nico'),
        ('Insumos M√©dicos', 'Material m√©dico y de oficina'),
        ('Medicamentos', 'Compra de medicamentos para stock'),
        ('Equipos M√©dicos', 'Mantenimiento y compra de equipos'),
        ('Limpieza', 'Productos y servicios de limpieza'),
        ('Seguros', 'P√≥lizas de seguro'),
        ('Marketing', 'Publicidad y marketing'),
        ('Capacitaci√≥n', 'Cursos y entrenamientos'),
    ]
    
    for nombre, desc in tipos_gastos:
        TipoGasto.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': desc}
        )
    
    print(f"‚úÖ Creados {len(tipos_gastos)} tipos de gastos")

def crear_doctores():
    """Crear doctores de ejemplo"""
    print("üë®‚Äç‚öïÔ∏è Creando doctores...")
    
    especialidades = list(Especialidad.objects.all())
    
    doctores_data = [
        {
            'nombres': 'Carlos Eduardo',
            'apellidos': 'Gonz√°lez V√°squez',
            'ruc': '1712345678001',
            'fecha_nacimiento': date(1975, 3, 15),
            'direccion': 'Av. 6 de Diciembre N24-253 y Lizardo Garc√≠a, Quito',
            'codigo_unico_doctor': 'DOC001',
            'telefonos': '0987654321',
            'email': 'carlos.gonzalez@clinica.com',
            'horario_atencion': 'Lunes a Viernes: 08:00 - 17:00, S√°bados: 08:00 - 12:00',
            'duracion_atencion': 30,
            'especialidades': ['Medicina General', 'Cardiolog√≠a']
        },
        {
            'nombres': 'Mar√≠a Fernanda',
            'apellidos': 'L√≥pez Herrera',
            'ruc': '1723456789001',
            'fecha_nacimiento': date(1980, 7, 22),
            'direccion': 'Av. Rep√∫blica del Salvador N34-377 y Mosc√∫, Quito',
            'codigo_unico_doctor': 'DOC002',
            'telefonos': '0976543210',
            'email': 'maria.lopez@clinica.com',
            'horario_atencion': 'Lunes a Viernes: 14:00 - 20:00',
            'duracion_atencion': 45,
            'especialidades': ['Pediatr√≠a']
        },
        {
            'nombres': 'Roberto Carlos',
            'apellidos': 'Mart√≠nez Silva',
            'ruc': '1734567890001',
            'fecha_nacimiento': date(1978, 11, 8),
            'direccion': 'Av. Amazonas N39-123 y Ar√≠zaga, Quito',
            'codigo_unico_doctor': 'DOC003',
            'telefonos': '0965432109',
            'email': 'roberto.martinez@clinica.com',
            'horario_atencion': 'Martes a S√°bado: 09:00 - 16:00',
            'duracion_atencion': 30,
            'especialidades': ['Dermatolog√≠a']
        },
        {
            'nombres': 'Ana Luc√≠a',
            'apellidos': 'Rodr√≠guez Morales',
            'ruc': '1745678901001',
            'fecha_nacimiento': date(1982, 5, 18),
            'direccion': 'Av. Eloy Alfaro N32-650 y Rusia, Quito',
            'codigo_unico_doctor': 'DOC004',
            'telefonos': '0954321098',
            'email': 'ana.rodriguez@clinica.com',
            'horario_atencion': 'Lunes a Viernes: 07:00 - 15:00',
            'duracion_atencion': 40,
            'especialidades': ['Ginecolog√≠a']
        },
    ]
    
    for data in doctores_data:
        especialidades_nombres = data.pop('especialidades')
        doctor, created = Doctor.objects.get_or_create(
            ruc=data['ruc'],
            defaults=data
        )
        
        if created:
            # Asignar especialidades
            for esp_nombre in especialidades_nombres:
                especialidad = Especialidad.objects.filter(nombre=esp_nombre).first()
                if especialidad:
                    doctor.especialidad.add(especialidad)
    
    print(f"‚úÖ Creados {len(doctores_data)} doctores")

def crear_empleados():
    """Crear empleados de ejemplo"""
    print("üë• Creando empleados...")
    
    cargos = {c.nombre: c for c in Cargo.objects.all()}
    
    empleados_data = [
        {
            'nombres': 'Carmen Rosa',
            'apellidos': 'Jim√©nez P√©rez',
            'cedula_ecuatoriana': '1756789012',
            'fecha_nacimiento': date(1985, 9, 12),
            'cargo': cargos['Recepcionista'],
            'sueldo': Decimal('450.00'),
            'fecha_ingreso': date(2023, 1, 15),
            'direccion': 'Sector La Magdalena, Quito'
        },
        {
            'nombres': 'Luis Miguel',
            'apellidos': 'Vargas Torres',
            'cedula_ecuatoriana': '1767890123',
            'fecha_nacimiento': date(1990, 2, 28),
            'cargo': cargos['Auxiliar de Enfermer√≠a'],
            'sueldo': Decimal('520.00'),
            'fecha_ingreso': date(2023, 3, 10),
            'direccion': 'Sector Solanda, Quito'
        },
        {
            'nombres': 'Patricia Elena',
            'apellidos': 'Moreno Castro',
            'cedula_ecuatoriana': '1778901234',
            'fecha_nacimiento': date(1988, 6, 14),
            'cargo': cargos['Enfermero/a'],
            'sueldo': Decimal('680.00'),
            'fecha_ingreso': date(2022, 8, 20),
            'direccion': 'Sector El Condado, Quito'
        },
        {
            'nombres': 'Gabriel Andr√©s',
            'apellidos': 'Ruiz Sandoval',
            'cedula_ecuatoriana': '1789012345',
            'fecha_nacimiento': date(1987, 12, 3),
            'cargo': cargos['Administrador'],
            'sueldo': Decimal('850.00'),
            'fecha_ingreso': date(2022, 4, 5),
            'direccion': 'Sector La Carolina, Quito'
        },
    ]
    
    for data in empleados_data:
        Empleado.objects.get_or_create(
            cedula_ecuatoriana=data['cedula_ecuatoriana'],
            defaults=data
        )
    
    print(f"‚úÖ Creados {len(empleados_data)} empleados")

def crear_pacientes():
    """Crear pacientes de ejemplo"""
    print("üè• Creando pacientes...")
    
    tipos_sangre = list(TipoSangre.objects.all())
    
    pacientes_data = [
        {
            'nombres': 'Jos√© Antonio',
            'apellidos': 'P√©rez Morales',
            'cedula_ecuatoriana': '1712345679',
            'fecha_nacimiento': date(1975, 8, 20),
            'telefono': '0987654321',
            'email': 'jose.perez@email.com',
            'sexo': SexoChoices.MASCULINO,
            'estado_civil': EstadoCivilChoices.CASADO,
            'direccion': 'Av. Mariscal Sucre N45-120 y Toledo, Quito',
            'antecedentes_personales': 'Hipertensi√≥n arterial diagnosticada hace 5 a√±os, controlada con medicamentos',
            'medicamentos_actuales': 'Losart√°n 50mg cada 12 horas',
            'alergias': 'Penicilina',
            'habitos_toxicos': 'Ex fumador (dej√≥ hace 3 a√±os)',
        },
        {
            'nombres': 'Mar√≠a Elena',
            'apellidos': 'Garc√≠a V√°squez',
            'cedula_ecuatoriana': '1723456780',
            'fecha_nacimiento': date(1988, 3, 15),
            'telefono': '0976543210',
            'email': 'maria.garcia@email.com',
            'sexo': SexoChoices.FEMENINO,
            'estado_civil': EstadoCivilChoices.SOLTERO,
            'direccion': 'Calle Guayaquil N8-55 y Esmeraldas, Quito',
            'antecedentes_familiares': 'Madre con diabetes tipo 2, padre con hipertensi√≥n',
            'antecedentes_gineco_obstetricos': 'Menarquia a los 13 a√±os, ciclos regulares, G0P0A0',
            'alergias': 'Mariscos',
            'habitos_toxicos': 'Ninguno',
        },
        {
            'nombres': 'Carlos Andr√©s',
            'apellidos': 'Rodr√≠guez Luna',
            'cedula_ecuatoriana': '1734567891',
            'fecha_nacimiento': date(1992, 11, 8),
            'telefono': '0965432109',
            'email': 'carlos.rodriguez@email.com',
            'sexo': SexoChoices.MASCULINO,
            'estado_civil': EstadoCivilChoices.SOLTERO,
            'direccion': 'Sector La Floresta, Calle Andaluc√≠a N24-03',
            'antecedentes_quirurgicos': 'Apendicectom√≠a en 2015',
            'habitos_toxicos': 'Alcohol ocasional (fines de semana)',
            'vacunas': 'COVID-19 completa, influenza anual',
        },
        {
            'nombres': 'Ana Sof√≠a',
            'apellidos': 'Mart√≠nez Silva',
            'cedula_ecuatoriana': '1745678902',
            'fecha_nacimiento': date(1995, 6, 25),
            'telefono': '0954321098',
            'email': 'ana.martinez@email.com',
            'sexo': SexoChoices.FEMENINO,
            'estado_civil': EstadoCivilChoices.UNION_LIBRE,
            'direccion': 'Sector Cumbay√°, Calle de las Orqu√≠deas N14-25',
            'antecedentes_gineco_obstetricos': 'G1P1A0, parto eut√≥cico hace 2 a√±os',
            'medicamentos_actuales': 'Anticonceptivos orales',
            'alergias': 'Polen',
            'habitos_toxicos': 'Ninguno',
        },
        {
            'nombres': 'Roberto Miguel',
            'apellidos': 'L√≥pez Herrera',
            'cedula_ecuatoriana': '1756789013',
            'fecha_nacimiento': date(1960, 1, 12),
            'telefono': '0943210987',
            'email': 'roberto.lopez@email.com',
            'sexo': SexoChoices.MASCULINO,
            'estado_civil': EstadoCivilChoices.CASADO,
            'direccion': 'Av. de Los Shyris N36-188 y Naciones Unidas',
            'antecedentes_personales': 'Diabetes tipo 2 desde hace 8 a√±os, dislipidemia',
            'medicamentos_actuales': 'Metformina 850mg c/12h, Atorvastatina 20mg/noche',
            'habitos_toxicos': 'Ex fumador (dej√≥ hace 10 a√±os)',
            'antecedentes_familiares': 'Padre falleci√≥ por infarto, madre con diabetes',
        },
        {
            'nombres': 'Luc√≠a Fernanda',
            'apellidos': 'Torres Morales',
            'cedula_ecuatoriana': '1767890124',
            'fecha_nacimiento': date(2010, 9, 18),
            'telefono': '0932109876',
            'email': None,  # Menor de edad
            'sexo': SexoChoices.FEMENINO,
            'estado_civil': EstadoCivilChoices.SOLTERO,
            'direccion': 'Sector El Bosque, Calle de los Cipreses N12-34',
            'antecedentes_familiares': 'Sin antecedentes patol√≥gicos familiares relevantes',
            'vacunas': 'Esquema completo para la edad, COVID-19 pedi√°trica',
            'habitos_toxicos': 'Ninguno',
        },
    ]
    
    for i, data in enumerate(pacientes_data):
        data['tipo_sangre'] = random.choice(tipos_sangre)
        Paciente.objects.get_or_create(
            cedula_ecuatoriana=data['cedula_ecuatoriana'],
            defaults=data
        )
    
    print(f"‚úÖ Creados {len(pacientes_data)} pacientes")

def crear_gastos_mensuales():
    """Crear gastos mensuales de ejemplo"""
    print("üí∏ Creando gastos mensuales...")
    
    tipos_gastos = list(TipoGasto.objects.all())
    
    # Crear gastos para los √∫ltimos 3 meses
    base_date = date.today().replace(day=1)
    
    gastos_data = [
        # Gastos fijos mensuales
        ('Arriendo', 800.00),
        ('Luz', 45.50),
        ('Agua', 25.30),
        ('Internet', 35.00),
        ('Tel√©fono', 20.00),
        ('Seguros', 120.00),
        
        # Gastos variables
        ('Insumos M√©dicos', 150.75),
        ('Medicamentos', 220.40),
        ('Limpieza', 40.25),
        ('Marketing', 80.00),
    ]
    
    for mes_offset in range(3):  # √öltimos 3 meses
        fecha_gasto = base_date - timedelta(days=mes_offset * 30)
        
        for tipo_nombre, valor_base in gastos_data:
            tipo_gasto = TipoGasto.objects.filter(nombre=tipo_nombre).first()
            if tipo_gasto:
                # Agregar variaci√≥n aleatoria ¬±10%
                variacion = random.uniform(0.9, 1.1)
                valor_final = round(valor_base * variacion, 2)
                
                GastoMensual.objects.get_or_create(
                    tipo_gasto=tipo_gasto,
                    fecha=fecha_gasto,
                    defaults={
                        'valor': Decimal(str(valor_final)),
                        'observacion': f'Gasto mensual de {fecha_gasto.strftime("%B %Y")}'
                    }
                )
    
    print("‚úÖ Creados gastos mensuales de los √∫ltimos 3 meses")

def crear_horarios_atencion():
    """Crear horarios de atenci√≥n"""
    print("‚è∞ Creando horarios de atenci√≥n...")
    
    horarios = [
        # Horario matutino
        (DiaSemanaChoices.LUNES, time(8, 0), time(12, 0), None, None),
        (DiaSemanaChoices.MARTES, time(8, 0), time(12, 0), None, None),
        (DiaSemanaChoices.MIERCOLES, time(8, 0), time(12, 0), None, None),
        (DiaSemanaChoices.JUEVES, time(8, 0), time(12, 0), None, None),
        (DiaSemanaChoices.VIERNES, time(8, 0), time(12, 0), None, None),
        
        # Horario vespertino
        (DiaSemanaChoices.LUNES, time(14, 0), time(18, 0), None, None),
        (DiaSemanaChoices.MARTES, time(14, 0), time(18, 0), None, None),
        (DiaSemanaChoices.MIERCOLES, time(14, 0), time(18, 0), None, None),
        (DiaSemanaChoices.JUEVES, time(14, 0), time(18, 0), None, None),
        (DiaSemanaChoices.VIERNES, time(14, 0), time(18, 0), None, None),
        
        # S√°bados
        (DiaSemanaChoices.SABADO, time(8, 0), time(12, 0), None, None),
    ]
    
    for dia, inicio, fin, int_desde, int_hasta in horarios:
        HorarioAtencion.objects.get_or_create(
            dia_semana=dia,
            hora_inicio=inicio,
            hora_fin=fin,
            defaults={
                'intervalo_desde': int_desde,
                'intervalo_hasta': int_hasta
            }
        )
    
    print(f"‚úÖ Creados {len(horarios)} horarios de atenci√≥n")

def crear_servicios_adicionales():
    """Crear servicios adicionales"""
    print("üè• Creando servicios adicionales...")
    
    servicios = [
        ('Consulta M√©dica General', 25.00, 'Consulta m√©dica de medicina general'),
        ('Consulta Especializada', 40.00, 'Consulta con m√©dico especialista'),
        ('Electrocardiograma', 15.00, 'ECG de 12 derivaciones'),
        ('Radiograf√≠a Simple', 20.00, 'Radiograf√≠a simple de una proyecci√≥n'),
        ('Ecograf√≠a Abdominal', 35.00, 'Ecograf√≠a del abdomen completo'),
        ('Laboratorio B√°sico', 12.00, 'Ex√°menes de laboratorio b√°sicos'),
        ('Hemograma Completo', 8.00, 'Conteo sangu√≠neo completo'),
        ('Glicemia', 3.00, 'Medici√≥n de glucosa en sangre'),
        ('Curaciones', 5.00, 'Curaci√≥n de heridas menores'),
        ('Inyecciones', 2.00, 'Aplicaci√≥n de medicamentos inyectables'),
        ('Nebulizaciones', 4.00, 'Terapia respiratoria con nebulizador'),
        ('Control de Presi√≥n', 3.00, 'Medici√≥n y control de presi√≥n arterial'),
        ('Certificado M√©dico', 10.00, 'Emisi√≥n de certificado m√©dico'),
        ('Papanicolaou', 18.00, 'Citolog√≠a cervical'),
        ('Vacunaci√≥n', 15.00, 'Aplicaci√≥n de vacunas'),
    ]
    
    for nombre, costo, desc in servicios:
        ServiciosAdicionales.objects.get_or_create(
            nombre_servicio=nombre,
            defaults={
                'costo_servicio': Decimal(str(costo)),
                'descripcion': desc
            }
        )
    
    print(f"‚úÖ Creados {len(servicios)} servicios adicionales")

def crear_citas_medicas():
    """Crear citas m√©dicas de ejemplo"""
    print("üìÖ Creando citas m√©dicas...")
    
    pacientes = list(Paciente.objects.all())
    
    # Crear citas para los pr√≥ximos 7 d√≠as
    base_date = date.today()
    
    citas_data = []
    for day_offset in range(7):
        fecha_cita = base_date + timedelta(days=day_offset)
        
        # Skip domingos
        if fecha_cita.weekday() == 6:
            continue
            
        # Horarios de citas
        horarios = [
            time(8, 0), time(8, 30), time(9, 0), time(9, 30), time(10, 0),
            time(10, 30), time(11, 0), time(11, 30), time(14, 0), time(14, 30),
            time(15, 0), time(15, 30), time(16, 0), time(16, 30), time(17, 0)
        ]
        
        # Crear 3-5 citas por d√≠a
        num_citas = random.randint(3, min(5, len(pacientes)))
        horarios_seleccionados = random.sample(horarios, num_citas)
        pacientes_seleccionados = random.sample(pacientes, num_citas)
        
        for hora, paciente in zip(horarios_seleccionados, pacientes_seleccionados):
            estado = random.choice([
                EstadoCitaChoices.DISPONIBLE,
                EstadoCitaChoices.OCUPADO,
                EstadoCitaChoices.ATENDIDO if day_offset < 2 else EstadoCitaChoices.OCUPADO
            ])
            
            citas_data.append({
                'paciente': paciente,
                'fecha': fecha_cita,
                'hora_cita': hora,
                'estado': estado,
                'observaciones': f'Cita programada para {paciente.nombre_completo}'
            })
    
    for data in citas_data:
        try:
            CitaMedica.objects.get_or_create(
                paciente=data['paciente'],
                fecha=data['fecha'],
                hora_cita=data['hora_cita'],
                defaults={
                    'estado': data['estado'],
                    'observaciones': data['observaciones']
                }
            )
        except:
            # Skip si hay conflicto de horarios
            continue
    
    print(f"‚úÖ Creadas {len(citas_data)} citas m√©dicas")

def crear_atenciones():
    """Crear atenciones m√©dicas"""
    print("ü©∫ Creando atenciones m√©dicas...")
    
    pacientes = list(Paciente.objects.all())
    diagnosticos = list(Diagnostico.objects.all())
    
    # Crear atenciones de los √∫ltimos 30 d√≠as
    base_datetime = timezone.now()
    
    atenciones_data = [
        {
            'paciente': pacientes[0],  # Jos√© Antonio
            'dias_atras': 5,
            'motivo': 'Control de presi√≥n arterial y renovaci√≥n de receta',
            'sintomas': 'Paciente asintom√°tico, acude para control rutinario',
            'tratamiento': 'Continuar con Losart√°n 50mg c/12h. Control en 3 meses',
            'presion_arterial': '140/85',
            'pulso': 78,
            'peso': Decimal('78.5'),
            'altura': Decimal('1.72'),
            'diagnosticos': ['I10']  # Hipertensi√≥n
        },
        {
            'paciente': pacientes[1],  # Mar√≠a Elena
            'dias_atras': 3,
            'motivo': 'Dolor abdominal y n√°useas',
            'sintomas': 'Dolor epig√°strico, n√°useas ocasionales, acidez',
            'tratamiento': 'Omeprazol 20mg en ayunas x 14 d√≠as. Dieta blanda',
            'presion_arterial': '110/70',
            'pulso': 82,
            'temperatura': Decimal('36.8'),
            'peso': Decimal('58.2'),
            'altura': Decimal('1.62'),
            'diagnosticos': ['K21.9']  # ERGE
        },
        {
            'paciente': pacientes[2],  # Carlos Andr√©s
            'dias_atras': 10,
            'motivo': 'Dolor de cabeza recurrente',
            'sintomas': 'Cefalea frontal, intensidad moderada, relacionada con estr√©s',
            'tratamiento': 'Paracetamol 500mg c/8h PRN, t√©cnicas de relajaci√≥n',
            'presion_arterial': '125/80',
            'pulso': 75,
            'peso': Decimal('72.0'),
            'altura': Decimal('1.75'),
            'diagnosticos': ['R51']  # Cefalea
        },
        {
            'paciente': pacientes[3],  # Ana Sof√≠a
            'dias_atras': 7,
            'motivo': 'Control ginecol√≥gico rutinario',
            'sintomas': 'Asintom√°tica, acude para control anual',
            'tratamiento': 'Continuar con anticonceptivos orales, control en 6 meses',
            'presion_arterial': '105/65',
            'pulso': 68,
            'peso': Decimal('55.8'),
            'altura': Decimal('1.58'),
            'diagnosticos': []  # Sin diagn√≥stico patol√≥gico
        },
        {
            'paciente': pacientes[4],  # Roberto Miguel
            'dias_atras': 2,
            'motivo': 'Control de diabetes y dislipidemia',
            'sintomas': 'Paciente con buen control metab√≥lico',
            'tratamiento': 'Continuar Metformina y Atorvastatina. Laboratorios en 3 meses',
            'presion_arterial': '135/82',
            'pulso': 80,
            'peso': Decimal('85.2'),
            'altura': Decimal('1.68'),
            'diagnosticos': ['E11.9']  # Diabetes tipo 2
        },
        {
            'paciente': pacientes[5],  # Luc√≠a (menor)
            'dias_atras': 15,
            'motivo': 'Consulta por fiebre y malestar general',
            'sintomas': 'Fiebre de 38.5¬∞C, malestar general, congesti√≥n nasal',
            'tratamiento': 'Paracetamol seg√∫n peso, abundantes l√≠quidos, reposo',
            'temperatura': Decimal('38.5'),
            'pulso': 110,
            'peso': Decimal('35.0'),
            'altura': Decimal('1.42'),
            'diagnosticos': ['J00']  # Resfriado com√∫n
        },
    ]
    
    for data in atenciones_data:
        fecha_atencion = base_datetime - timedelta(days=data['dias_atras'])
        
        atencion = Atencion.objects.create(
            paciente=data['paciente'],
            fecha_atencion=fecha_atencion,
            motivo_consulta=data['motivo'],
            sintomas=data['sintomas'],
            tratamiento=data['tratamiento'],
            presion_arterial=data.get('presion_arterial'),
            pulso=data.get('pulso'),
            temperatura=data.get('temperatura'),
            peso=data.get('peso'),
            altura=data.get('altura'),
            examen_fisico='Examen f√≠sico dentro de par√°metros normales',
            comentario_adicional='Paciente colaborador, comprende indicaciones'
        )
        
        # Agregar diagn√≥sticos
        for codigo_diag in data.get('diagnosticos', []):
            diagnostico = Diagnostico.objects.filter(codigo=codigo_diag).first()
            if diagnostico:
                atencion.diagnostico.add(diagnostico)
    
    print(f"‚úÖ Creadas {len(atenciones_data)} atenciones m√©dicas")

def crear_detalles_atencion():
    """Crear detalles de atenci√≥n (medicamentos prescritos)"""
    print("üíä Creando detalles de atenci√≥n...")
    
    atenciones = list(Atencion.objects.all())
    medicamentos = list(Medicamento.objects.all())
    
    detalles_data = [
        # Para hipertensi√≥n (Jos√© Antonio)
        {
            'atencion_index': 0,
            'medicamento_nombre': 'Losart√°n',
            'cantidad': 30,
            'prescripcion': 'Tomar 1 tableta cada 12 horas, preferiblemente a la misma hora',
            'duracion': 30,
            'frecuencia': 2
        },
        # Para ERGE (Mar√≠a Elena)
        {
            'atencion_index': 1,
            'medicamento_nombre': 'Paracetamol',  # Usamos uno disponible
            'cantidad': 14,
            'prescripcion': 'Tomar 1 c√°psula en ayunas por 14 d√≠as',
            'duracion': 14,
            'frecuencia': 1
        },
        # Para cefalea (Carlos Andr√©s)
        {
            'atencion_index': 2,
            'medicamento_nombre': 'Paracetamol',
            'cantidad': 10,
            'prescripcion': 'Tomar 1 tableta cada 8 horas solo si hay dolor',
            'duracion': 5,
            'frecuencia': 3
        },
        # Para resfriado (Luc√≠a)
        {
            'atencion_index': 5,
            'medicamento_nombre': 'Paracetamol',
            'cantidad': 7,
            'prescripcion': 'Tomar seg√∫n peso corporal cada 6 horas si hay fiebre',
            'duracion': 7,
            'frecuencia': 4
        },
        # Para diabetes (Roberto Miguel)
        {
            'atencion_index': 4,
            'medicamento_nombre': 'Metformina',
            'cantidad': 60,
            'prescripcion': 'Tomar 1 tableta cada 12 horas con las comidas',
            'duracion': 30,
            'frecuencia': 2
        },
    ]
    
    for data in detalles_data:
        if data['atencion_index'] < len(atenciones):
            atencion = atenciones[data['atencion_index']]
            medicamento = Medicamento.objects.filter(nombre=data['medicamento_nombre']).first()
            
            if medicamento:
                DetalleAtencion.objects.get_or_create(
                    atencion=atencion,
                    medicamento=medicamento,
                    defaults={
                        'cantidad': data['cantidad'],
                        'prescripcion': data['prescripcion'],
                        'duracion_tratamiento': data['duracion'],
                        'frecuencia_diaria': data['frecuencia']
                    }
                )
    
    print(f"‚úÖ Creados {len(detalles_data)} detalles de atenci√≥n")

def crear_pagos():
    """Crear pagos de ejemplo"""
    print("üí≥ Creando pagos...")
    
    atenciones = list(Atencion.objects.all())
    servicios = list(ServiciosAdicionales.objects.all())
    
    pagos_data = []
    
    for i, atencion in enumerate(atenciones):
        # Determinar m√©todo de pago aleatorio
        metodo = random.choice([
            MetodoPagoChoices.EFECTIVO,
            MetodoPagoChoices.TARJETA,
            MetodoPagoChoices.TRANSFERENCIA
        ])
        
        # Estado del pago
        estado = EstadoPagoChoices.PAGADO if i < 4 else EstadoPagoChoices.PENDIENTE
        
        # Monto base de consulta
        servicio_consulta = ServiciosAdicionales.objects.filter(
            nombre_servicio__icontains='Consulta'
        ).first()
        
        monto = servicio_consulta.costo_servicio if servicio_consulta else Decimal('25.00')
        
        # Crear pago
        pago = Pago.objects.create(
            atencion=atencion,
            metodo_pago=metodo,
            monto_total=monto,
            estado=estado,
            fecha_pago=atencion.fecha_atencion if estado == EstadoPagoChoices.PAGADO else None,
            nombre_pagador=atencion.paciente.nombre_completo,
            observaciones=f'Pago por consulta m√©dica - {atencion.paciente.nombre_completo}'
        )
        
        pagos_data.append(pago)
    
    print(f"‚úÖ Creados {len(pagos_data)} pagos")

def crear_detalles_pago():
    """Crear detalles de pago"""
    print("üßæ Creando detalles de pago...")
    
    pagos = list(Pago.objects.all())
    servicios = list(ServiciosAdicionales.objects.all())
    
    for i, pago in enumerate(pagos):
        # Servicio principal (consulta)
        if i % 3 == 0:  # Consulta general
            servicio = ServiciosAdicionales.objects.filter(
                nombre_servicio='Consulta M√©dica General'
            ).first()
        else:  # Consulta especializada
            servicio = ServiciosAdicionales.objects.filter(
                nombre_servicio='Consulta Especializada'
            ).first()
        
        if servicio:
            DetallePago.objects.create(
                pago=pago,
                servicio_adicional=servicio,
                cantidad=1,
                precio_unitario=servicio.costo_servicio,
                descuento_porcentaje=Decimal('0.00'),
                aplica_seguro=False
            )
        
        # Agregar servicios adicionales ocasionalmente
        if i % 4 == 0:  # 25% de las veces
            servicio_adicional = random.choice([
                'Electrocardiograma',
                'Laboratorio B√°sico',
                'Control de Presi√≥n'
            ])
            
            servicio = ServiciosAdicionales.objects.filter(
                nombre_servicio=servicio_adicional
            ).first()
            
            if servicio:
                DetallePago.objects.create(
                    pago=pago,
                    servicio_adicional=servicio,
                    cantidad=1,
                    precio_unitario=servicio.costo_servicio,
                    descuento_porcentaje=Decimal('0.00'),
                    aplica_seguro=False
                )
        
        # Recalcular total del pago
        from django.db.models import Sum
        total = pago.detalles.aggregate(
            total=Sum('subtotal')
        )['total'] or Decimal('0.00')
        
        pago.monto_total = total
        pago.save()
    
    print("‚úÖ Creados detalles de pago y actualizados totales")

def main():
    """Funci√≥n principal que ejecuta todo el proceso"""
    print("üöÄ Iniciando creaci√≥n de datos completos del sistema...")
    print("=" * 60)
    
    try:
        # Limpiar datos existentes
        limpiar_datos()
        
        # Crear datos base
        crear_tipos_sangre()
        crear_especialidades()
        crear_cargos()
        crear_tipos_medicamentos()
        crear_marcas_medicamentos()
        crear_medicamentos()
        crear_diagnosticos()
        crear_tipos_gastos()
        
        # Crear personas
        crear_doctores()
        crear_empleados()
        crear_pacientes()
        
        # Crear datos operativos
        crear_gastos_mensuales()
        crear_horarios_atencion()
        crear_servicios_adicionales()
        
        # Crear datos m√©dicos
        crear_citas_medicas()
        crear_atenciones()
        crear_detalles_atencion()
        crear_pagos()
        crear_detalles_pago()
        
        print("=" * 60)
        print("üéâ ¬°PROCESO COMPLETADO EXITOSAMENTE!")
        print()
        print("üìä RESUMEN DE DATOS CREADOS:")
        print(f"   ‚Ä¢ Pacientes: {Paciente.objects.count()}")
        print(f"   ‚Ä¢ Doctores: {Doctor.objects.count()}")
        print(f"   ‚Ä¢ Empleados: {Empleado.objects.count()}")
        print(f"   ‚Ä¢ Medicamentos: {Medicamento.objects.count()}")
        print(f"   ‚Ä¢ Diagn√≥sticos: {Diagnostico.objects.count()}")
        print(f"   ‚Ä¢ Servicios: {ServiciosAdicionales.objects.count()}")
        print(f"   ‚Ä¢ Citas m√©dicas: {CitaMedica.objects.count()}")
        print(f"   ‚Ä¢ Atenciones: {Atencion.objects.count()}")
        print(f"   ‚Ä¢ Pagos: {Pago.objects.count()}")
        print(f"   ‚Ä¢ Gastos mensuales: {GastoMensual.objects.count()}")
        print()
        print("üåü El sistema ahora tiene datos realistas para pruebas")
        print("üöÄ Puede ejecutar: python manage.py runserver")
        print("üåê Y navegar a los m√≥dulos para ver los datos")
        
    except Exception as e:
        print(f"‚ùå Error durante la ejecuci√≥n: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
