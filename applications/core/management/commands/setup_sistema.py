#!/usr/bin/env python
from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.db import transaction
from decimal import Decimal
from datetime import datetime, timedelta, date, time
import random

# Importar todos los modelos necesarios
from applications.core.models import (
    TipoSangre, Paciente, Especialidad, Doctor, Cargo, Empleado,
    TipoMedicamento, MarcaMedicamento, Medicamento, Diagnostico,
    TipoGasto, GastoMensual
)
from applications.doctor.models import (
    HorarioAtencion, CitaMedica, Atencion, DetalleAtencion,
    ServiciosAdicionales, Pago, DetallePago
)
from applications.security.models import Module, GroupModulePermission, User, Menu
from django.contrib.auth.models import Permission, Group
from django.contrib.contenttypes.models import ContentType

# Importar choices
from applications.doctor.utils.cita_medica import EstadoCitaChoices
from applications.doctor.utils.doctor import DiaSemanaChoices
from applications.doctor.utils.pago import MetodoPagoChoices, EstadoPagoChoices
from applications.core.utils.medicamento import ViaAdministracion
from applications.core.utils.paciente import EstadoCivilChoices, SexoChoices
from django.utils import timezone


class Command(BaseCommand):
    help = 'Instala el sistema completo con m√≥dulos, grupos, permisos y datos de ejemplo'

    def add_arguments(self, parser):
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Elimina todos los datos existentes antes de crear nuevos',
        )
        parser.add_argument(
            '--hard-reset',
            action='store_true',
            help='Reset completo incluyendo IDs desde 1 (ELIMINA TODO)',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üè• INSTALANDO SISTEMA CL√çNICO COMPLETO'))
        self.stdout.write('=' * 60)
        
        try:
            with transaction.atomic():
                if options['reset'] or options['hard_reset']:
                    self.limpiar_datos()
                
                if options['hard_reset']:
                    self.stdout.write(self.style.WARNING('‚ö†Ô∏è  REALIZANDO RESET COMPLETO DE IDs'))
                
                # 1. Crear m√≥dulos y estructura de seguridad
                self.crear_menus()
                self.crear_modulos()
                self.crear_grupos()
                self.asignar_permisos()
                
                # 2. Crear datos base
                self.crear_tipos_sangre()
                self.crear_especialidades()
                self.crear_cargos()
                self.crear_tipos_medicamentos()
                self.crear_marcas_medicamentos()
                self.crear_medicamentos()
                self.crear_diagnosticos()
                self.crear_tipos_gastos()
                
                # 3. Crear personas
                self.crear_doctores()
                self.crear_empleados()
                self.crear_pacientes()
                
                # 4. Crear datos operativos
                self.crear_gastos_mensuales()
                self.crear_horarios_atencion()
                self.crear_servicios_adicionales()
                
                # 5. Crear datos m√©dicos
                self.crear_citas_medicas()
                self.crear_atenciones()
                self.crear_detalles_atencion()
                self.crear_pagos()
                self.crear_detalles_pago()
                
                self.mostrar_resumen()
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Error: {str(e)}'))
            raise

    def limpiar_datos(self):
        """Limpia datos existentes"""
        self.stdout.write('üßπ Limpiando datos existentes...')
        
        # Limpiar en orden inverso de dependencias
        DetallePago.objects.all().delete()
        Pago.objects.all().delete()
        DetalleAtencion.objects.all().delete()
        Atencion.objects.all().delete()
        CitaMedica.objects.all().delete()
        HorarioAtencion.objects.all().delete()
        
        GastoMensual.objects.all().delete()
        Empleado.objects.all().delete()
        Doctor.objects.filter(ruc__startswith='17').delete()
        Paciente.objects.filter(cedula_ecuatoriana__startswith='17').delete()
        
        # Limpiar tambi√©n security
        GroupModulePermission.objects.all().delete()
        Module.objects.all().delete()
        Menu.objects.all().delete()
        Group.objects.all().delete()
        
        # Limpiar logs del admin de Django para evitar conflictos de ID
        from django.contrib.admin.models import LogEntry
        LogEntry.objects.all().delete()
        
        # Resetear secuencias de ID para que empiecen desde 1
        self.resetear_secuencias_id()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Datos limpiados'))

    def resetear_secuencias_id(self):
        """Resetea las secuencias de ID para que empiecen desde 1"""
        self.stdout.write('üîÑ Reseteando IDs...')
        
        from django.db import connection
        
        with connection.cursor() as cursor:
            # Para SQLite
            if connection.vendor == 'sqlite':
                self.stdout.write('  üíæ Detectado SQLite - Reseteando secuencias...')
                try:
                    # Limpiar completamente la tabla sqlite_sequence
                    cursor.execute("DELETE FROM sqlite_sequence")
                    self.stdout.write('  ‚úÖ Secuencias SQLite reseteadas')
                except Exception as e:
                    self.stdout.write(f'  ‚ùå Error reseteando SQLite: {e}')
            
            # Para PostgreSQL
            elif connection.vendor == 'postgresql':
                self.stdout.write('  üêò Detectado PostgreSQL - Reseteando secuencias...')
                try:
                    # Obtener TODAS las secuencias que terminan en _id_seq (incluye Django admin)
                    cursor.execute("""
                        SELECT sequencename 
                        FROM pg_sequences 
                        WHERE sequencename LIKE %s
                        ORDER BY sequencename
                    """, ['%_id_seq'])
                    
                    secuencias = cursor.fetchall()
                    self.stdout.write(f'  üìã Encontradas {len(secuencias)} secuencias')
                    
                    # Tambi√©n resetear secuencias espec√≠ficas de Django que no terminan en _id_seq
                    secuencias_adicionales = [
                        'django_admin_log_id_seq',
                        'django_content_type_id_seq', 
                        'auth_permission_id_seq',
                        'django_migrations_id_seq',
                        'django_session_session_key_seq'  # si existe
                    ]
                    
                    # Verificar y resetear secuencias adicionales
                    for seq_adicional in secuencias_adicionales:
                        cursor.execute("""
                            SELECT sequencename 
                            FROM pg_sequences 
                            WHERE sequencename = %s
                        """, [seq_adicional])
                        
                        if cursor.fetchone():
                            secuencias.append((seq_adicional,))
                    
                    # Resetear todas las secuencias encontradas
                    for (seq_name,) in secuencias:
                        try:
                            cursor.execute(f"ALTER SEQUENCE {seq_name} RESTART WITH 1")
                            self.stdout.write(f'  ‚úÖ {seq_name} ‚Üí reseteada a 1')
                        except Exception as e:
                            self.stdout.write(f'  ‚ùå Error en {seq_name}: {e}')
                            
                    if not secuencias:
                        self.stdout.write('  ‚ö†Ô∏è  No se encontraron secuencias para resetear')
                        
                except Exception as e:
                    self.stdout.write(f'  ‚ùå Error obteniendo secuencias PostgreSQL: {e}')
            
            # Para MySQL
            elif connection.vendor == 'mysql':
                self.stdout.write('  üê¨ Detectado MySQL - Reseteando AUTO_INCREMENT...')
                # Lista de tablas principales
                tablas_mysql = [
                    'auth_user', 'auth_group', 'security_module', 'security_menu',
                    'core_tiposangre', 'core_especialidad', 'core_cargo', 'core_empleado',
                    'core_doctor', 'core_paciente', 'core_tipomedicamento', 'core_marcamedicamento',
                    'core_medicamento', 'core_tipogasto', 'core_gastomensual', 'core_diagnostico',
                    'doctor_serviciosadicionales', 'doctor_horarioatencion', 'doctor_citamedica',
                    'doctor_detalleatencion', 'doctor_detallepago', 'doctor_pago', 'doctor_atencion'
                ]
                
                for tabla in tablas_mysql:
                    try:
                        cursor.execute(f"ALTER TABLE {tabla} AUTO_INCREMENT = 1")
                        self.stdout.write(f'  ‚úÖ {tabla} ‚Üí reseteada a 1')
                    except Exception as e:
                        continue
            
            else:
                self.stdout.write(f'  ‚ùå Base de datos no soportada: {connection.vendor}')
        
        self.stdout.write(self.style.SUCCESS('‚úÖ IDs reseteados - empezar√°n desde 1'))

    def reset_completo_base_datos(self):
        """Reset m√°s agresivo eliminando completamente las tablas (CUIDADO!)"""
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  RESET COMPLETO DE BASE DE DATOS'))
        
        from django.core.management import call_command
        from django.db import connection
        
        try:
            # Eliminar todas las migraciones aplicadas (excepto la inicial)
            with connection.cursor() as cursor:
                if connection.vendor == 'sqlite':
                    # Para SQLite, simplemente eliminamos el archivo de base de datos
                    self.stdout.write('üóëÔ∏è  Para SQLite: elimine manualmente el archivo db.sqlite3')
                else:
                    # Para otras bases de datos, eliminamos las tablas
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                    tablas = cursor.fetchall()
                    for tabla in tablas:
                        if tabla[0] != 'sqlite_sequence':
                            cursor.execute(f"DROP TABLE IF EXISTS {tabla[0]}")
            
            # Recrear migraciones
            self.stdout.write('üîÑ Recreando migraciones...')
            call_command('migrate', verbosity=0)
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Error en reset completo: {str(e)}'))
            self.stdout.write('üí° Ejecute manualmente: rm db.sqlite3 && python manage.py migrate')

    def crear_menus(self):
        """Crear men√∫s del sistema"""
        self.stdout.write('üìÇ Creando men√∫s...')
        
        menus = [
            {'name': 'Core', 'icon': 'fas fa-heart', 'order': 1},
            {'name': 'Doctor', 'icon': 'fas fa-user-md', 'order': 2},
            {'name': 'Security', 'icon': 'fas fa-shield-alt', 'order': 3},
        ]
        
        for data in menus:
            Menu.objects.get_or_create(
                name=data['name'],
                defaults=data
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(menus)} men√∫s'))

    def crear_modulos(self):
        """Crear m√≥dulos del sistema"""
        self.stdout.write('üì¶ Creando m√≥dulos...')
        
        # Obtener men√∫s
        menu_core = Menu.objects.get(name='Core')
        menu_doctor = Menu.objects.get(name='Doctor')
        menu_security = Menu.objects.get(name='Security')
        
        modulos = [
            # CORE
            {'name': 'Pacientes', 'url': '/core/pacientes/', 'icon': 'fas fa-user-injured', 'menu': menu_core, 'order': 1},
            {'name': 'Doctores', 'url': '/core/doctores/', 'icon': 'fas fa-user-md', 'menu': menu_core, 'order': 2},
            {'name': 'Empleados', 'url': '/core/empleados/', 'icon': 'fas fa-users', 'menu': menu_core, 'order': 3},
            {'name': 'Especialidades', 'url': '/core/especialidades/', 'icon': 'fas fa-stethoscope', 'menu': menu_core, 'order': 4},
            {'name': 'Cargos', 'url': '/core/cargos/', 'icon': 'fas fa-id-badge', 'menu': menu_core, 'order': 5},
            {'name': 'Medicamentos', 'url': '/core/medicamentos/', 'icon': 'fas fa-pills', 'menu': menu_core, 'order': 6},
            {'name': 'Tipos de Medicamento', 'url': '/core/tipo_medicamento/', 'icon': 'fas fa-prescription-bottle', 'menu': menu_core, 'order': 7},
            {'name': 'Marcas de Medicamento', 'url': '/core/marca_medicamento/', 'icon': 'fas fa-industry', 'menu': menu_core, 'order': 8},
            {'name': 'Diagn√≥sticos', 'url': '/core/diagnosticos/', 'icon': 'fas fa-diagnoses', 'menu': menu_core, 'order': 9},
            {'name': 'Tipos de Sangre', 'url': '/core/tipo_sangre/', 'icon': 'fas fa-tint', 'menu': menu_core, 'order': 10},
            {'name': 'Tipos de Gasto', 'url': '/core/tipo_gasto/', 'icon': 'fas fa-tags', 'menu': menu_core, 'order': 11},
            {'name': 'Gastos Mensuales', 'url': '/core/gasto_mensual/', 'icon': 'fas fa-money-bill-wave', 'menu': menu_core, 'order': 12},
            
            # DOCTOR
            {'name': 'Horarios de Atenci√≥n', 'url': '/doctor/horario/', 'icon': 'fas fa-clock', 'menu': menu_doctor, 'order': 1},
            {'name': 'Citas M√©dicas', 'url': '/doctor/cita_medica/', 'icon': 'fas fa-calendar-check', 'menu': menu_doctor, 'order': 2},
            {'name': 'Atenciones', 'url': '/doctor/atenciones/', 'icon': 'fas fa-notes-medical', 'menu': menu_doctor, 'order': 3},
            {'name': 'Detalles de Atenci√≥n', 'url': '/doctor/detalle_atencion/', 'icon': 'fas fa-prescription', 'menu': menu_doctor, 'order': 4},
            {'name': 'Servicios Adicionales', 'url': '/doctor/servicios_adicionales/', 'icon': 'fas fa-plus-square', 'menu': menu_doctor, 'order': 5},
            {'name': 'Pagos', 'url': '/doctor/pago/', 'icon': 'fas fa-credit-card', 'menu': menu_doctor, 'order': 6},
            {'name': 'Detalles de Pago', 'url': '/doctor/detalle_pago/', 'icon': 'fas fa-receipt', 'menu': menu_doctor, 'order': 7},
            
            # SECURITY
            {'name': 'Usuarios', 'url': '/security/usuarios_list/', 'icon': 'fas fa-users-cog', 'menu': menu_security, 'order': 1},
            {'name': 'Grupos', 'url': '/security/group_list/', 'icon': 'fas fa-user-friends', 'menu': menu_security, 'order': 2},
            {'name': 'Permisos', 'url': '/security/group_permission_list/', 'icon': 'fas fa-shield-alt', 'menu': menu_security, 'order': 3},
            {'name': 'M√≥dulos', 'url': '/security/module_list/', 'icon': 'fas fa-cubes', 'menu': menu_security, 'order': 4},
            {'name': 'Men√∫s', 'url': '/security/menu_list/', 'icon': 'fas fa-list', 'menu': menu_security, 'order': 5},
        ]
        
        for data in modulos:
            Module.objects.get_or_create(
                name=data['name'],
                defaults={
                    'url': data['url'],
                    'icon': data['icon'],
                    'menu': data['menu'],
                    'order': data['order'],
                    'is_active': True
                }
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(modulos)} m√≥dulos'))

    def crear_grupos(self):
        """Crear grupos de usuarios"""
        self.stdout.write('üë• Creando grupos...')
        
        grupos = [
            'Administradores',
            'M√©dicos', 
            'Asistentes',
            'Recepcionistas'
        ]
        
        for nombre in grupos:
            Group.objects.get_or_create(name=nombre)
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(grupos)} grupos'))

    def asignar_permisos(self):
        """Asignar permisos a grupos"""
        self.stdout.write('üîê Asignando permisos...')
        
        # Obtener grupos
        admin_group = Group.objects.get(name='Administradores')
        medicos_group = Group.objects.get(name='M√©dicos')
        asistentes_group = Group.objects.get(name='Asistentes')
        recepcionistas_group = Group.objects.get(name='Recepcionistas')
        
        # Obtener m√≥dulos
        modulos = Module.objects.all()
        
        # Asignar todos los permisos a administradores
        for modulo in modulos:
            GroupModulePermission.objects.get_or_create(
                group=admin_group,
                module=modulo,
                defaults={}
            )
        
        # Permisos para m√©dicos
        modulos_medicos = [
            'Pacientes', 'Doctores', 'Especialidades', 'Medicamentos', 'Diagn√≥sticos',
            'Horarios de Atenci√≥n', 'Citas M√©dicas', 'Atenciones', 'Detalles de Atenci√≥n',
            'Servicios Adicionales', 'Pagos', 'Detalles de Pago'
        ]
        
        for nombre_modulo in modulos_medicos:
            modulo = Module.objects.filter(name=nombre_modulo).first()
            if modulo:
                GroupModulePermission.objects.get_or_create(
                    group=medicos_group,
                    module=modulo,
                    defaults={}
                )
        
        # Permisos para asistentes
        modulos_asistentes = [
            'Pacientes', 'Citas M√©dicas', 'Atenciones', 'Pagos', 'Servicios Adicionales'
        ]
        
        for nombre_modulo in modulos_asistentes:
            modulo = Module.objects.filter(name=nombre_modulo).first()
            if modulo:
                GroupModulePermission.objects.get_or_create(
                    group=asistentes_group,
                    module=modulo,
                    defaults={}
                )
        
        # Permisos para recepcionistas
        modulos_recepcionistas = [
            'Pacientes', 'Citas M√©dicas', 'Pagos', 'Detalles de Pago'
        ]
        
        for nombre_modulo in modulos_recepcionistas:
            modulo = Module.objects.filter(name=nombre_modulo).first()
            if modulo:
                GroupModulePermission.objects.get_or_create(
                    group=recepcionistas_group,
                    module=modulo,
                    defaults={}
                )
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Permisos asignados'))

    def crear_tipos_sangre(self):
        """Crear tipos de sangre"""
        self.stdout.write('ü©∏ Creando tipos de sangre...')
        
        tipos = [
            ('O+', 'Tipo O positivo - Donante universal de gl√≥bulos rojos'),
            ('O-', 'Tipo O negativo - Donante universal'),
            ('A+', 'Tipo A positivo'),
            ('A-', 'Tipo A negativo'),
            ('B+', 'Tipo B positivo'),
            ('B-', 'Tipo B negativo'),
            ('AB+', 'Tipo AB positivo - Receptor universal'),
            ('AB-', 'Tipo AB negativo'),
        ]
        
        for tipo, desc in tipos:
            TipoSangre.objects.get_or_create(
                tipo=tipo,
                defaults={'descripcion': desc}
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(tipos)} tipos de sangre'))

    def crear_especialidades(self):
        """Crear especialidades m√©dicas"""
        self.stdout.write('üë®‚Äç‚öïÔ∏è Creando especialidades...')
        
        especialidades = [
            ('Medicina General', 'Atenci√≥n m√©dica integral y primaria'),
            ('Cardiolog√≠a', 'Especialidad del coraz√≥n y sistema cardiovascular'),
            ('Pediatr√≠a', 'Atenci√≥n m√©dica especializada en ni√±os y adolescentes'),
            ('Ginecolog√≠a', 'Salud reproductiva femenina'),
            ('Dermatolog√≠a', 'Enfermedades de la piel'),
            ('Traumatolog√≠a', 'Lesiones del sistema musculoesquel√©tico'),
            ('Neurolog√≠a', 'Enfermedades del sistema nervioso'),
            ('Psiquiatr√≠a', 'Trastornos mentales y del comportamiento'),
            ('Oftalmolog√≠a', 'Enfermedades de los ojos'),
            ('Otorrinolaringolog√≠a', 'Enfermedades del o√≠do, nariz y garganta'),
        ]
        
        for nombre, desc in especialidades:
            Especialidad.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': desc}
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creadas {len(especialidades)} especialidades'))

    def crear_cargos(self):
        """Crear cargos"""
        self.stdout.write('üíº Creando cargos...')
        
        cargos = [
            ('M√©dico Especialista', 'M√©dico con especializaci√≥n'),
            ('M√©dico General', 'M√©dico de atenci√≥n primaria'),
            ('Enfermero/a', 'Personal de enfermer√≠a'),
            ('Auxiliar de Enfermer√≠a', 'Asistente de enfermer√≠a'),
            ('Recepcionista', 'Atenci√≥n al cliente y citas'),
            ('Administrador', 'Gesti√≥n administrativa'),
            ('Contador', 'Gesti√≥n contable y financiera'),
            ('Limpieza', 'Personal de limpieza y mantenimiento'),
            ('Seguridad', 'Personal de seguridad'),
            ('Farmaceuta', 'Gesti√≥n de medicamentos'),
        ]
        
        for nombre, desc in cargos:
            Cargo.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': desc}
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(cargos)} cargos'))

    def crear_tipos_medicamentos(self):
        """Crear tipos de medicamentos"""
        self.stdout.write('üíä Creando tipos de medicamentos...')
        
        tipos = [
            ('Analg√©sico', 'Medicamentos para aliviar el dolor'),
            ('Antibi√≥tico', 'Medicamentos contra infecciones bacterianas'),
            ('Antiinflamatorio', 'Reduce inflamaci√≥n y dolor'),
            ('Antihipertensivo', 'Control de presi√≥n arterial'),
            ('Antidiab√©tico', 'Control de diabetes'),
            ('Vitaminas', 'Suplementos vitam√≠nicos'),
            ('Antihistam√≠nico', 'Tratamiento de alergias'),
            ('Antidepresivo', 'Tratamiento de depresi√≥n'),
            ('Ansiol√≠tico', 'Tratamiento de ansiedad'),
            ('Broncodilatador', 'Tratamiento de asma y EPOC'),
        ]
        
        for nombre, desc in tipos:
            TipoMedicamento.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': desc}
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(tipos)} tipos'))

    def crear_marcas_medicamentos(self):
        """Crear marcas de medicamentos"""
        self.stdout.write('üè≠ Creando marcas...')
        
        marcas = [
            ('Pfizer', 'Farmac√©utica multinacional'),
            ('Bayer', 'Empresa farmac√©utica alemana'),
            ('Novartis', 'Farmac√©utica suiza'),
            ('Roche', 'Empresa farmac√©utica suiza'),
            ('Johnson & Johnson', 'Corporaci√≥n farmac√©utica estadounidense'),
            ('Abbott', 'Empresa de salud global'),
            ('Merck', 'Farmac√©utica alemana'),
            ('GSK', 'GlaxoSmithKline'),
            ('Sanofi', 'Farmac√©utica francesa'),
            ('Gen√©rico', 'Medicamentos gen√©ricos'),
        ]
        
        for nombre, desc in marcas:
            MarcaMedicamento.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': desc}
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creadas {len(marcas)} marcas'))

    def crear_medicamentos(self):
        """Crear medicamentos"""
        self.stdout.write('üíâ Creando medicamentos...')
        
        tipos = {t.nombre: t for t in TipoMedicamento.objects.all()}
        marcas = {m.nombre: m for m in MarcaMedicamento.objects.all()}
        
        medicamentos = [
            ('Paracetamol', tipos['Analg√©sico'], marcas['Gen√©rico'], '500mg', ViaAdministracion.ORAL, 100, 0.50, True),
            ('Ibuprofeno', tipos['Antiinflamatorio'], marcas['Bayer'], '400mg', ViaAdministracion.ORAL, 80, 0.75, True),
            ('Aspirina', tipos['Analg√©sico'], marcas['Bayer'], '100mg', ViaAdministracion.ORAL, 120, 0.30, True),
            ('Amoxicilina', tipos['Antibi√≥tico'], marcas['GSK'], '500mg', ViaAdministracion.ORAL, 60, 2.50, True),
            ('Azitromicina', tipos['Antibi√≥tico'], marcas['Pfizer'], '250mg', ViaAdministracion.ORAL, 30, 8.00, True),
            ('Cefalexina', tipos['Antibi√≥tico'], marcas['Gen√©rico'], '500mg', ViaAdministracion.ORAL, 40, 3.20, True),
            ('Losart√°n', tipos['Antihipertensivo'], marcas['Merck'], '50mg', ViaAdministracion.ORAL, 90, 1.80, True),
            ('Enalapril', tipos['Antihipertensivo'], marcas['Gen√©rico'], '10mg', ViaAdministracion.ORAL, 100, 1.20, True),
            ('Metformina', tipos['Antidiab√©tico'], marcas['Sanofi'], '850mg', ViaAdministracion.ORAL, 70, 2.10, True),
            ('Glibenclamida', tipos['Antidiab√©tico'], marcas['Gen√©rico'], '5mg', ViaAdministracion.ORAL, 50, 1.50, True),
            ('Complejo B', tipos['Vitaminas'], marcas['Abbott'], '100mg', ViaAdministracion.ORAL, 150, 5.00, True),
            ('Vitamina C', tipos['Vitaminas'], marcas['Bayer'], '1g', ViaAdministracion.ORAL, 200, 3.50, True),
            ('Loratadina', tipos['Antihistam√≠nico'], marcas['Johnson & Johnson'], '10mg', ViaAdministracion.ORAL, 60, 4.20, True),
            ('Cetirizina', tipos['Antihistam√≠nico'], marcas['GSK'], '10mg', ViaAdministracion.ORAL, 45, 5.80, True),
            ('Salbutamol', tipos['Broncodilatador'], marcas['GSK'], '100mcg', ViaAdministracion.INHALATORIA, 25, 12.50, True),
        ]
        
        for nombre, tipo, marca, conc, via, cant, precio, comercial in medicamentos:
            Medicamento.objects.get_or_create(
                nombre=nombre,
                defaults={
                    'tipo': tipo,
                    'marca_medicamento': marca,
                    'concentracion': conc,
                    'via_administracion': via,
                    'cantidad': cant,
                    'precio': Decimal(str(precio)),
                    'comercial': comercial
                }
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(medicamentos)} medicamentos'))

    def crear_diagnosticos(self):
        """Crear diagn√≥sticos"""
        self.stdout.write('ü©∫ Creando diagn√≥sticos...')
        
        diagnosticos = [
            ('J00', 'Rinofaringitis aguda [resfriado com√∫n]', 'Infecci√≥n viral del tracto respiratorio superior'),
            ('K59.0', 'Estre√±imiento', 'Dificultad para evacuar'),
            ('R50.9', 'Fiebre no especificada', 'Elevaci√≥n de temperatura corporal'),
            ('M25.5', 'Dolor articular', 'Dolor en articulaciones'),
            ('R51', 'Cefalea', 'Dolor de cabeza'),
            ('K30', 'Dispepsia funcional', 'Indigesti√≥n'),
            ('I10', 'Hipertensi√≥n esencial', 'Presi√≥n arterial elevada'),
            ('E11.9', 'Diabetes mellitus tipo 2 sin complicaciones', 'Diabetes tipo 2'),
            ('F32.9', 'Episodio depresivo sin especificar', 'Depresi√≥n'),
            ('J20.9', 'Bronquitis aguda no especificada', 'Inflamaci√≥n de bronquios'),
            ('L20.9', 'Dermatitis at√≥pica no especificada', 'Eczema'),
            ('N39.0', 'Infecci√≥n de v√≠as urinarias', 'ITU'),
            ('M54.5', 'Lumbago', 'Dolor lumbar'),
            ('R06.02', 'Dificultad respiratoria', 'Disnea'),
            ('K21.9', 'Enfermedad por reflujo gastroesof√°gico', 'ERGE'),
        ]
        
        for codigo, desc, datos in diagnosticos:
            Diagnostico.objects.get_or_create(
                codigo=codigo,
                defaults={
                    'descripcion': desc,
                    'datos_adicionales': datos
                }
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(diagnosticos)} diagn√≥sticos'))

    def crear_tipos_gastos(self):
        """Crear tipos de gastos"""
        self.stdout.write('üí∞ Creando tipos de gastos...')
        
        tipos_gastos = [
            ('Arriendo', 'Alquiler del local del consultorio'),
            ('Luz', 'Servicio de energ√≠a el√©ctrica'),
            ('Agua', 'Servicio de agua potable'),
            ('Internet', 'Servicio de internet y telecomunicaciones'),
            ('Tel√©fono', 'Servicio telef√≥nico'),
            ('Insumos M√©dicos', 'Material m√©dico y de oficina'),
            ('Medicamentos', 'Compra de medicamentos para stock'),
            ('Equipos M√©dicos', 'Mantenimiento y compra de equipos'),
            ('Limpieza', 'Productos y servicios de limpieza'),
            ('Seguros', 'P√≥lizas de seguro'),
            ('Marketing', 'Publicidad y marketing'),
            ('Capacitaci√≥n', 'Cursos y entrenamientos'),
        ]
        
        for nombre, desc in tipos_gastos:
            TipoGasto.objects.get_or_create(
                nombre=nombre,
                defaults={'descripcion': desc}
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(tipos_gastos)} tipos de gastos'))

    def crear_doctores(self):
        """Crear doctores"""
        self.stdout.write('üë®‚Äç‚öïÔ∏è Creando doctores...')
        
        especialidades = list(Especialidad.objects.all())
        
        doctores_data = [
            {
                'nombres': 'Carlos Eduardo',
                'apellidos': 'Gonz√°lez V√°squez',
                'ruc': '1712345678001',
                'fecha_nacimiento': date(1975, 3, 15),
                'direccion': 'Av. 6 de Diciembre N24-253 y Lizardo Garc√≠a, Quito',
                'codigo_unico_doctor': 'DOC001',
                'telefonos': '0987654321',
                'email': 'carlos.gonzalez@clinica.com',
                'horario_atencion': 'Lunes a Viernes: 08:00 - 17:00, S√°bados: 08:00 - 12:00',
                'duracion_atencion': 30,
                'especialidades': ['Medicina General', 'Cardiolog√≠a']
            },
            {
                'nombres': 'Mar√≠a Fernanda',
                'apellidos': 'L√≥pez Herrera',
                'ruc': '1723456789001',
                'fecha_nacimiento': date(1980, 7, 22),
                'direccion': 'Av. Rep√∫blica del Salvador N34-377 y Mosc√∫, Quito',
                'codigo_unico_doctor': 'DOC002',
                'telefonos': '0976543210',
                'email': 'maria.lopez@clinica.com',
                'horario_atencion': 'Lunes a Viernes: 14:00 - 20:00',
                'duracion_atencion': 45,
                'especialidades': ['Pediatr√≠a']
            },
            {
                'nombres': 'Roberto Carlos',
                'apellidos': 'Mart√≠nez Silva',
                'ruc': '1734567890001',
                'fecha_nacimiento': date(1978, 11, 8),
                'direccion': 'Av. Amazonas N39-123 y Ar√≠zaga, Quito',
                'codigo_unico_doctor': 'DOC003',
                'telefonos': '0965432109',
                'email': 'roberto.martinez@clinica.com',
                'horario_atencion': 'Martes a S√°bado: 09:00 - 16:00',
                'duracion_atencion': 30,
                'especialidades': ['Dermatolog√≠a']
            },
            {
                'nombres': 'Ana Luc√≠a',
                'apellidos': 'Rodr√≠guez Morales',
                'ruc': '1745678901001',
                'fecha_nacimiento': date(1982, 5, 18),
                'direccion': 'Av. Eloy Alfaro N32-650 y Rusia, Quito',
                'codigo_unico_doctor': 'DOC004',
                'telefonos': '0954321098',
                'email': 'ana.rodriguez@clinica.com',
                'horario_atencion': 'Lunes a Viernes: 07:00 - 15:00',
                'duracion_atencion': 40,
                'especialidades': ['Ginecolog√≠a']
            },
        ]
        
        for data in doctores_data:
            especialidades_nombres = data.pop('especialidades')
            doctor, created = Doctor.objects.get_or_create(
                ruc=data['ruc'],
                defaults=data
            )
            
            if created:
                for esp_nombre in especialidades_nombres:
                    especialidad = Especialidad.objects.filter(nombre=esp_nombre).first()
                    if especialidad:
                        doctor.especialidad.add(especialidad)
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(doctores_data)} doctores'))

    def crear_empleados(self):
        """Crear empleados"""
        self.stdout.write('üë• Creando empleados...')
        
        cargos = {c.nombre: c for c in Cargo.objects.all()}
        
        empleados_data = [
            {
                'nombres': 'Carmen Rosa',
                'apellidos': 'Jim√©nez P√©rez',
                'cedula_ecuatoriana': '1756789012',
                'fecha_nacimiento': date(1985, 9, 12),
                'cargo': cargos['Recepcionista'],
                'sueldo': Decimal('450.00'),
                'fecha_ingreso': date(2023, 1, 15),
                'direccion': 'Sector La Magdalena, Quito'
            },
            {
                'nombres': 'Luis Miguel',
                'apellidos': 'Vargas Torres',
                'cedula_ecuatoriana': '1767890123',
                'fecha_nacimiento': date(1990, 2, 28),
                'cargo': cargos['Auxiliar de Enfermer√≠a'],
                'sueldo': Decimal('520.00'),
                'fecha_ingreso': date(2023, 3, 10),
                'direccion': 'Sector Solanda, Quito'
            },
            {
                'nombres': 'Patricia Elena',
                'apellidos': 'Moreno Castro',
                'cedula_ecuatoriana': '1778901234',
                'fecha_nacimiento': date(1988, 6, 14),
                'cargo': cargos['Enfermero/a'],
                'sueldo': Decimal('680.00'),
                'fecha_ingreso': date(2022, 8, 20),
                'direccion': 'Sector El Condado, Quito'
            },
            {
                'nombres': 'Gabriel Andr√©s',
                'apellidos': 'Ruiz Sandoval',
                'cedula_ecuatoriana': '1789012345',
                'fecha_nacimiento': date(1987, 12, 3),
                'cargo': cargos['Administrador'],
                'sueldo': Decimal('850.00'),
                'fecha_ingreso': date(2022, 4, 5),
                'direccion': 'Sector La Carolina, Quito'
            },
        ]
        
        for data in empleados_data:
            Empleado.objects.get_or_create(
                cedula_ecuatoriana=data['cedula_ecuatoriana'],
                defaults=data
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(empleados_data)} empleados'))

    def crear_pacientes(self):
        """Crear pacientes"""
        self.stdout.write('üè• Creando pacientes...')
        
        tipos_sangre = list(TipoSangre.objects.all())
        
        pacientes_data = [
            {
                'nombres': 'Jos√© Antonio',
                'apellidos': 'P√©rez Morales',
                'cedula_ecuatoriana': '1712345679',
                'fecha_nacimiento': date(1975, 8, 20),
                'telefono': '0987654321',
                'email': 'jose.perez@email.com',
                'sexo': SexoChoices.MASCULINO,
                'estado_civil': EstadoCivilChoices.CASADO,
                'direccion': 'Av. Mariscal Sucre N45-120 y Toledo, Quito',
                'antecedentes_personales': 'Hipertensi√≥n arterial diagnosticada hace 5 a√±os, controlada con medicamentos',
                'medicamentos_actuales': 'Losart√°n 50mg cada 12 horas',
                'alergias': 'Penicilina',
                'habitos_toxicos': 'Ex fumador (dej√≥ hace 3 a√±os)',
            },
            {
                'nombres': 'Mar√≠a Elena',
                'apellidos': 'Garc√≠a V√°squez',
                'cedula_ecuatoriana': '1723456780',
                'fecha_nacimiento': date(1988, 3, 15),
                'telefono': '0976543210',
                'email': 'maria.garcia@email.com',
                'sexo': SexoChoices.FEMENINO,
                'estado_civil': EstadoCivilChoices.SOLTERO,
                'direccion': 'Calle Guayaquil N8-55 y Esmeraldas, Quito',
                'antecedentes_familiares': 'Madre con diabetes tipo 2, padre con hipertensi√≥n',
                'antecedentes_gineco_obstetricos': 'Menarquia a los 13 a√±os, ciclos regulares, G0P0A0',
                'alergias': 'Mariscos',
                'habitos_toxicos': 'Ninguno',
            },
            {
                'nombres': 'Carlos Andr√©s',
                'apellidos': 'Rodr√≠guez Luna',
                'cedula_ecuatoriana': '1734567891',
                'fecha_nacimiento': date(1992, 11, 8),
                'telefono': '0965432109',
                'email': 'carlos.rodriguez@email.com',
                'sexo': SexoChoices.MASCULINO,
                'estado_civil': EstadoCivilChoices.SOLTERO,
                'direccion': 'Sector La Floresta, Calle Andaluc√≠a N24-03',
                'antecedentes_quirurgicos': 'Apendicectom√≠a en 2015',
                'habitos_toxicos': 'Alcohol ocasional (fines de semana)',
                'vacunas': 'COVID-19 completa, influenza anual',
            },
            {
                'nombres': 'Ana Sof√≠a',
                'apellidos': 'Mart√≠nez Silva',
                'cedula_ecuatoriana': '1745678902',
                'fecha_nacimiento': date(1995, 6, 25),
                'telefono': '0954321098',
                'email': 'ana.martinez@email.com',
                'sexo': SexoChoices.FEMENINO,
                'estado_civil': EstadoCivilChoices.UNION_LIBRE,
                'direccion': 'Sector Cumbay√°, Calle de las Orqu√≠deas N14-25',
                'antecedentes_gineco_obstetricos': 'G1P1A0, parto eut√≥cico hace 2 a√±os',
                'medicamentos_actuales': 'Anticonceptivos orales',
                'alergias': 'Polen',
                'habitos_toxicos': 'Ninguno',
            },
            {
                'nombres': 'Roberto Miguel',
                'apellidos': 'L√≥pez Herrera',
                'cedula_ecuatoriana': '1756789013',
                'fecha_nacimiento': date(1960, 1, 12),
                'telefono': '0943210987',
                'email': 'roberto.lopez@email.com',
                'sexo': SexoChoices.MASCULINO,
                'estado_civil': EstadoCivilChoices.CASADO,
                'direccion': 'Av. de Los Shyris N36-188 y Naciones Unidas',
                'antecedentes_personales': 'Diabetes tipo 2 desde hace 8 a√±os, dislipidemia',
                'medicamentos_actuales': 'Metformina 850mg c/12h, Atorvastatina 20mg/noche',
                'habitos_toxicos': 'Ex fumador (dej√≥ hace 10 a√±os)',
                'antecedentes_familiares': 'Padre falleci√≥ por infarto, madre con diabetes',
            },
            {
                'nombres': 'Luc√≠a Fernanda',
                'apellidos': 'Torres Morales',
                'cedula_ecuatoriana': '1767890124',
                'fecha_nacimiento': date(2010, 9, 18),
                'telefono': '0932109876',
                'email': None,
                'sexo': SexoChoices.FEMENINO,
                'estado_civil': EstadoCivilChoices.SOLTERO,
                'direccion': 'Sector El Bosque, Calle de los Cipreses N12-34',
                'antecedentes_familiares': 'Sin antecedentes patol√≥gicos familiares relevantes',
                'vacunas': 'Esquema completo para la edad, COVID-19 pedi√°trica',
                'habitos_toxicos': 'Ninguno',
            },
        ]
        
        for i, data in enumerate(pacientes_data):
            data['tipo_sangre'] = random.choice(tipos_sangre)
            Paciente.objects.get_or_create(
                cedula_ecuatoriana=data['cedula_ecuatoriana'],
                defaults=data
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(pacientes_data)} pacientes'))

    def crear_gastos_mensuales(self):
        """Crear gastos mensuales"""
        self.stdout.write('üí∏ Creando gastos mensuales...')
        
        tipos_gastos = list(TipoGasto.objects.all())
        base_date = date.today().replace(day=1)
        
        gastos_data = [
            ('Arriendo', 800.00),
            ('Luz', 45.50),
            ('Agua', 25.30),
            ('Internet', 35.00),
            ('Tel√©fono', 20.00),
            ('Seguros', 120.00),
            ('Insumos M√©dicos', 150.75),
            ('Medicamentos', 220.40),
            ('Limpieza', 40.25),
            ('Marketing', 80.00),
        ]
        
        for mes_offset in range(3):
            fecha_gasto = base_date - timedelta(days=mes_offset * 30)
            
            for tipo_nombre, valor_base in gastos_data:
                tipo_gasto = TipoGasto.objects.filter(nombre=tipo_nombre).first()
                if tipo_gasto:
                    variacion = random.uniform(0.9, 1.1)
                    valor_final = round(valor_base * variacion, 2)
                    
                    GastoMensual.objects.get_or_create(
                        tipo_gasto=tipo_gasto,
                        fecha=fecha_gasto,
                        defaults={
                            'valor': Decimal(str(valor_final)),
                            'observacion': f'Gasto mensual de {fecha_gasto.strftime("%B %Y")}'
                        }
                    )
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Creados gastos mensuales'))

    def crear_horarios_atencion(self):
        """Crear horarios de atenci√≥n"""
        self.stdout.write('‚è∞ Creando horarios...')
        
        horarios = [
            (DiaSemanaChoices.LUNES, time(8, 0), time(12, 0), None, None),
            (DiaSemanaChoices.MARTES, time(8, 0), time(12, 0), None, None),
            (DiaSemanaChoices.MIERCOLES, time(8, 0), time(12, 0), None, None),
            (DiaSemanaChoices.JUEVES, time(8, 0), time(12, 0), None, None),
            (DiaSemanaChoices.VIERNES, time(8, 0), time(12, 0), None, None),
            (DiaSemanaChoices.LUNES, time(14, 0), time(18, 0), None, None),
            (DiaSemanaChoices.MARTES, time(14, 0), time(18, 0), None, None),
            (DiaSemanaChoices.MIERCOLES, time(14, 0), time(18, 0), None, None),
            (DiaSemanaChoices.JUEVES, time(14, 0), time(18, 0), None, None),
            (DiaSemanaChoices.VIERNES, time(14, 0), time(18, 0), None, None),
            (DiaSemanaChoices.SABADO, time(8, 0), time(12, 0), None, None),
        ]
        
        for dia, inicio, fin, int_desde, int_hasta in horarios:
            HorarioAtencion.objects.get_or_create(
                dia_semana=dia,
                hora_inicio=inicio,
                hora_fin=fin,
                defaults={
                    'intervalo_desde': int_desde,
                    'intervalo_hasta': int_hasta
                }
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(horarios)} horarios'))

    def crear_servicios_adicionales(self):
        """Crear servicios adicionales"""
        self.stdout.write('üè• Creando servicios...')
        
        servicios = [
            ('Consulta M√©dica General', 25.00, 'Consulta m√©dica de medicina general'),
            ('Consulta Especializada', 40.00, 'Consulta con m√©dico especialista'),
            ('Electrocardiograma', 15.00, 'ECG de 12 derivaciones'),
            ('Radiograf√≠a Simple', 20.00, 'Radiograf√≠a simple de una proyecci√≥n'),
            ('Ecograf√≠a Abdominal', 35.00, 'Ecograf√≠a del abdomen completo'),
            ('Laboratorio B√°sico', 12.00, 'Ex√°menes de laboratorio b√°sicos'),
            ('Hemograma Completo', 8.00, 'Conteo sangu√≠neo completo'),
            ('Glicemia', 3.00, 'Medici√≥n de glucosa en sangre'),
            ('Curaciones', 5.00, 'Curaci√≥n de heridas menores'),
            ('Inyecciones', 2.00, 'Aplicaci√≥n de medicamentos inyectables'),
            ('Nebulizaciones', 4.00, 'Terapia respiratoria con nebulizador'),
            ('Control de Presi√≥n', 3.00, 'Medici√≥n y control de presi√≥n arterial'),
            ('Certificado M√©dico', 10.00, 'Emisi√≥n de certificado m√©dico'),
            ('Papanicolaou', 18.00, 'Citolog√≠a cervical'),
            ('Vacunaci√≥n', 15.00, 'Aplicaci√≥n de vacunas'),
        ]
        
        for nombre, costo, desc in servicios:
            ServiciosAdicionales.objects.get_or_create(
                nombre_servicio=nombre,
                defaults={
                    'costo_servicio': Decimal(str(costo)),
                    'descripcion': desc
                }
            )
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creados {len(servicios)} servicios'))

    def crear_citas_medicas(self):
        """Crear citas m√©dicas"""
        self.stdout.write('üìÖ Creando citas...')
        
        pacientes = list(Paciente.objects.all())
        base_date = date.today()
        
        citas_data = []
        for day_offset in range(7):
            fecha_cita = base_date + timedelta(days=day_offset)
            
            if fecha_cita.weekday() == 6:  # Skip domingos
                continue
                
            horarios = [
                time(8, 0), time(8, 30), time(9, 0), time(9, 30), time(10, 0),
                time(10, 30), time(11, 0), time(11, 30), time(14, 0), time(14, 30),
                time(15, 0), time(15, 30), time(16, 0), time(16, 30), time(17, 0)
            ]
            
            num_citas = random.randint(3, min(5, len(pacientes)))
            horarios_seleccionados = random.sample(horarios, num_citas)
            pacientes_seleccionados = random.sample(pacientes, num_citas)
            
            for hora, paciente in zip(horarios_seleccionados, pacientes_seleccionados):
                estado = random.choice([
                    EstadoCitaChoices.DISPONIBLE,
                    EstadoCitaChoices.OCUPADO,
                    EstadoCitaChoices.ATENDIDO if day_offset < 2 else EstadoCitaChoices.OCUPADO
                ])
                
                citas_data.append({
                    'paciente': paciente,
                    'fecha': fecha_cita,
                    'hora_cita': hora,
                    'estado': estado,
                    'observaciones': f'Cita programada para {paciente.nombre_completo}'
                })
        
        for data in citas_data:
            try:
                CitaMedica.objects.get_or_create(
                    paciente=data['paciente'],
                    fecha=data['fecha'],
                    hora_cita=data['hora_cita'],
                    defaults={
                        'estado': data['estado'],
                        'observaciones': data['observaciones']
                    }
                )
            except:
                continue
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creadas citas m√©dicas'))

    def crear_atenciones(self):
        """Crear atenciones m√©dicas"""
        self.stdout.write('ü©∫ Creando atenciones...')
        
        pacientes = list(Paciente.objects.all())
        diagnosticos = list(Diagnostico.objects.all())
        base_datetime = timezone.now()
        
        atenciones_data = [
            {
                'paciente': pacientes[0],
                'dias_atras': 5,
                'motivo': 'Control de presi√≥n arterial y renovaci√≥n de receta',
                'sintomas': 'Paciente asintom√°tico, acude para control rutinario',
                'tratamiento': 'Continuar con Losart√°n 50mg c/12h. Control en 3 meses',
                'presion_arterial': '140/85',
                'pulso': 78,
                'peso': Decimal('78.5'),
                'altura': Decimal('1.72'),
                'diagnosticos': ['I10']
            },
            {
                'paciente': pacientes[1],
                'dias_atras': 3,
                'motivo': 'Dolor abdominal y n√°useas',
                'sintomas': 'Dolor epig√°strico, n√°useas ocasionales, acidez',
                'tratamiento': 'Omeprazol 20mg en ayunas x 14 d√≠as. Dieta blanda',
                'presion_arterial': '110/70',
                'pulso': 82,
                'temperatura': Decimal('36.8'),
                'peso': Decimal('58.2'),
                'altura': Decimal('1.62'),
                'diagnosticos': ['K21.9']
            },
            {
                'paciente': pacientes[2],
                'dias_atras': 10,
                'motivo': 'Dolor de cabeza recurrente',
                'sintomas': 'Cefalea frontal, intensidad moderada, relacionada con estr√©s',
                'tratamiento': 'Paracetamol 500mg c/8h PRN, t√©cnicas de relajaci√≥n',
                'presion_arterial': '125/80',
                'pulso': 75,
                'peso': Decimal('72.0'),
                'altura': Decimal('1.75'),
                'diagnosticos': ['R51']
            },
        ]
        
        for data in atenciones_data:
            fecha_atencion = base_datetime - timedelta(days=data['dias_atras'])
            
            atencion = Atencion.objects.create(
                paciente=data['paciente'],
                fecha_atencion=fecha_atencion,
                motivo_consulta=data['motivo'],
                sintomas=data['sintomas'],
                tratamiento=data['tratamiento'],
                presion_arterial=data.get('presion_arterial'),
                pulso=data.get('pulso'),
                temperatura=data.get('temperatura'),
                peso=data.get('peso'),
                altura=data.get('altura'),
                examen_fisico='Examen f√≠sico dentro de par√°metros normales',
                comentario_adicional='Paciente colaborador, comprende indicaciones'
            )
            
            for codigo_diag in data.get('diagnosticos', []):
                diagnostico = Diagnostico.objects.filter(codigo=codigo_diag).first()
                if diagnostico:
                    atencion.diagnostico.add(diagnostico)
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Creadas {len(atenciones_data)} atenciones'))

    def crear_detalles_atencion(self):
        """Crear detalles de atenci√≥n"""
        self.stdout.write('üíä Creando detalles de atenci√≥n...')
        
        atenciones = list(Atencion.objects.all())
        medicamentos = list(Medicamento.objects.all())
        
        if atenciones and medicamentos:
            for atencion in atenciones[:3]:
                medicamento = random.choice(medicamentos)
                DetalleAtencion.objects.get_or_create(
                    atencion=atencion,
                    medicamento=medicamento,
                    defaults={
                        'cantidad': random.randint(7, 30),
                        'prescripcion': f'Tomar seg√∫n indicaciones m√©dicas',
                        'duracion_tratamiento': random.randint(7, 30),
                        'frecuencia_diaria': random.randint(1, 3)
                    }
                )
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Creados detalles de atenci√≥n'))

    def crear_pagos(self):
        """Crear pagos"""
        self.stdout.write('üí≥ Creando pagos...')
        
        atenciones = list(Atencion.objects.all())
        servicios = list(ServiciosAdicionales.objects.all())
        
        for i, atencion in enumerate(atenciones):
            metodo = random.choice([
                MetodoPagoChoices.EFECTIVO,
                MetodoPagoChoices.TARJETA,
                MetodoPagoChoices.TRANSFERENCIA
            ])
            
            estado = EstadoPagoChoices.PAGADO if i < 2 else EstadoPagoChoices.PENDIENTE
            
            servicio_consulta = ServiciosAdicionales.objects.filter(
                nombre_servicio__icontains='Consulta'
            ).first()
            
            monto = servicio_consulta.costo_servicio if servicio_consulta else Decimal('25.00')
            
            Pago.objects.create(
                atencion=atencion,
                metodo_pago=metodo,
                monto_total=monto,
                estado=estado,
                fecha_pago=atencion.fecha_atencion if estado == EstadoPagoChoices.PAGADO else None,
                nombre_pagador=atencion.paciente.nombre_completo,
                observaciones=f'Pago por consulta m√©dica - {atencion.paciente.nombre_completo}'
            )
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Creados pagos'))

    def crear_detalles_pago(self):
        """Crear detalles de pago"""
        self.stdout.write('üßæ Creando detalles de pago...')
        
        pagos = list(Pago.objects.all())
        servicios = list(ServiciosAdicionales.objects.all())
        
        from django.db.models import Sum
        
        for pago in pagos:
            servicio = random.choice(servicios)
            
            DetallePago.objects.create(
                pago=pago,
                servicio_adicional=servicio,
                cantidad=1,
                precio_unitario=servicio.costo_servicio,
                descuento_porcentaje=Decimal('0.00'),
                aplica_seguro=False
            )
            
            # Recalcular total
            total = pago.detalles.aggregate(
                total=Sum('subtotal')
            )['total'] or Decimal('0.00')
            
            pago.monto_total = total
            pago.save()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Creados detalles de pago'))

    def mostrar_resumen(self):
        """Mostrar resumen de datos creados"""
        self.stdout.write('=' * 60)
        self.stdout.write(self.style.SUCCESS('üéâ ¬°SISTEMA INSTALADO EXITOSAMENTE!'))
        self.stdout.write('')
        self.stdout.write('üìä RESUMEN DE DATOS CREADOS:')
        self.stdout.write(f'   ‚Ä¢ M√≥dulos: {Module.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Grupos: {Group.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Permisos asignados: {GroupModulePermission.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Pacientes: {Paciente.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Doctores: {Doctor.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Empleados: {Empleado.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Medicamentos: {Medicamento.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Diagn√≥sticos: {Diagnostico.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Servicios: {ServiciosAdicionales.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Citas m√©dicas: {CitaMedica.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Atenciones: {Atencion.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Pagos: {Pago.objects.count()}')
        self.stdout.write(f'   ‚Ä¢ Gastos mensuales: {GastoMensual.objects.count()}')
        self.stdout.write('')
        self.stdout.write('üåü El sistema est√° completamente configurado')
        self.stdout.write('üöÄ Ejecute: python manage.py runserver')
        self.stdout.write('üåê Visite: http://127.0.0.1:8000/')
